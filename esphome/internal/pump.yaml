packages:
  soil_sensor_${id}: !include
    file: soil_sensor.yaml
    vars:
      id: ${id}
      pin: ${soil_sensor_pin}

globals:
  - id: pump_${id}_last_run
    type: uint32_t
    restore_value: no
    initial_value: '0'

time:
  - id: !extend global_time
    on_time_sync:
      then:
        - globals.set:
            id: pump_${id}_last_run
            value: !lambda 'return id(global_time).now().timestamp;'

datetime:
  - id: pump_${id}_frequency
    platform: template
    type: time
    name: "Pump ${id} Frequency"
    optimistic: yes
    initial_value: "01:00:00"
    restore_value: true
    entity_category: "config"
  - id: pump_${id}_next_run_time
    platform: template
    type: time
    internal: true
    update_interval: 1s
    set_action:
      then:
        - lambda: "return;"
    lambda: |-
      uint32_t now = id(global_time).now().timestamp;
      uint32_t last_run = id(pump_${id}_last_run);
      int frequency = id(pump_${id}_frequency).hour * 3600 + id(pump_${id}_frequency).minute * 60 + id(pump_${id}_frequency).second;
      uint32_t next_run = last_run + frequency;
      if (now >= next_run) {
        int duration = id(pump_${id}_duration).state;
        next_run = next_run + duration;
      }
      return ESPTime::from_epoch_utc(next_run - now);
    on_value:
      then:
        - if:
            condition:
              - switch.is_on: pump_${id}_enabled
            then:
              - lvgl.label.update:
                  id: lbl_pump_${id}_next
                  text:
                    time_format: "%T"
                    time: !lambda return x;

number:
  - id: pump_${id}_power
    platform: template
    name: "Pump ${id} Power"
    min_value: 0
    max_value: 100
    step: 0.5
    unit_of_measurement: "%"
    initial_value: 50
    optimistic: true
    restore_value: true
    device_class: "power_factor"
    entity_category: "config"
  - id: pump_${id}_duration
    platform: template
    name: "Pump ${id} Duration"
    min_value: 0
    max_value: 3600
    step: 5
    unit_of_measurement: "s"
    initial_value: 10
    optimistic: true
    restore_value: true
    device_class: "duration"
    mode: "box"
    entity_category: "config"
  - id: pump_${id}_min_temperature
    platform: template
    name: "Pump ${id} Mininum Temperature"
    min_value: -20
    max_value: 50
    step: 1
    unit_of_measurement: "Â°C"
    initial_value: 10
    optimistic: true
    restore_value: true
    device_class: "temperature"
    mode: "box"
    entity_category: "config"
  - id: pump_${id}_min_light
    platform: template
    name: "Pump ${id} Mininum Light"
    min_value: 0
    max_value: 100
    step: 1
    unit_of_measurement: "%"
    initial_value: 50
    optimistic: true
    restore_value: true
    device_class: "illuminance"
    mode: "box"
    entity_category: "config"
  - id: pump_${id}_max_soil_moisture
    platform: template
    name: "Pump ${id} Maximum Soil Moisture"
    min_value: 0
    max_value: 100
    step: 1
    unit_of_measurement: "%"
    initial_value: 50
    optimistic: true
    restore_value: true
    device_class: "moisture"
    mode: "box"
    entity_category: "config"

output:
  - platform: ledc
    id: pump_${id}_output
    pin: $pin
    frequency: 5000Hz
    min_power: 0.0
    max_power: 1.0

switch:
  - id: pump_${id}_sw
    platform: output
    output: pump_${id}_output
    restore_mode: RESTORE_DEFAULT_OFF
    internal: true
    on_turn_on:
      - output.set_level:
          id: pump_${id}_output
          level: !lambda 'return id(pump_${id}_power).state / 100.0;'
      - lvgl.widget.show: spinner_pump_${id}
    on_turn_off:
      - lvgl.widget.hide: spinner_pump_${id}
  - id: pump_${id}_enabled
    name: "Pump ${id}"
    platform: template
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - lvgl.widget.enable:
          - lbl_pump_${id}
          - img_pump_${id}_light
          - img_pump_${id}_soil
          - lbl_pump_${id}_next
    on_turn_off:
      - lvgl.widget.disable:
          - lbl_pump_${id}
          - img_pump_${id}_light
          - img_pump_${id}_soil
          - lbl_pump_${id}_next
      - lvgl.label.update:
          id: lbl_pump_${id}_next
          text: "off"

button:
  - id: pump_${id}_run_button
    platform: template
    name: "Run Pump ${id}"
    on_press:
      - script.execute: force_run_pump_${id}

binary_sensor:
  - id: pump_${id}_has_light
    platform: template
    name: "Pump ${id} Light"
    device_class: "light"
    publish_initial_state: true
    lambda: |-
      return id(light_sensor).state >= id(pump_${id}_min_light).state;
    on_state:
      then:
        - if:
            condition:
              lambda: 'return x;'
            then:
              - lvgl.image.update: 
                  id: img_pump_${id}_light
                  src: sun
            else:
              - lvgl.image.update: 
                  id: img_pump_${id}_light
                  src: moon
  - id: pump_${id}_is_soil_wet
    platform: template
    name: "Pump ${id} Soil"
    device_class: "moisture"
    publish_initial_state: true
    lambda: |-
      return id(soil_sensor_${id}).state > id(pump_${id}_max_soil_moisture).state;
    on_state:
      then:
        - if:
            condition:
              lambda: 'return x;'
            then:
              - lvgl.image.update: 
                  id: img_pump_${id}_soil
                  src: plant_wet
            else:
              - lvgl.image.update: 
                  id: img_pump_${id}_soil
                  src: plant_dry
  - id: pump_${id}_is_cold
    platform: template
    name: "Pump ${id} Temperature"
    device_class: "cold"
    publish_initial_state: true
    lambda: |-
      return id(bme280_temperature).state < id(pump_${id}_min_temperature).state;
  - id: pump_${id}_is_time
    platform: template
    name: "Pump ${id} Time"
    device_class: "running"
    entity_category: "diagnostic"
    publish_initial_state: true
    lambda: |-
      uint32_t now = id(global_time).now().timestamp;
      uint32_t last_run = id(pump_${id}_last_run);
      int frequency = id(pump_${id}_frequency).hour * 3600 + id(pump_${id}_frequency).minute * 60 + id(pump_${id}_frequency).second;
      int duration = id(pump_${id}_duration).state;
      uint32_t next_run = last_run + frequency;
      uint32_t end_run = next_run + duration;
      if (now >= next_run && now <= end_run) {
        return true;
      } else if (now > end_run) {
        id(pump_${id}_last_run) = now;
        return false;
      } else {
        return false;
      }
  - id: pump_${id}_is_running
    platform: template
    name: "Pump ${id} is Running"
    device_class: "running"
    condition:
      and:
        - switch.is_on: pump_${id}_enabled
        - binary_sensor.is_off: pump_${id}_is_soil_wet
        - binary_sensor.is_on: pump_${id}_has_light
        - binary_sensor.is_off: pump_${id}_is_cold
        - binary_sensor.is_on: pump_${id}_is_time
    publish_initial_state: true
    on_state:
      then:
        - if:
            condition:
              lambda: 'return x;'
            then:
              - switch.turn_on: pump_${id}_sw
            else:
              - switch.turn_off: pump_${id}_sw

script:
  - id: force_run_pump_${id}
    mode: restart
    then:
      - if:
          condition:
            switch.is_on: pump_${id}_sw
          then:
            - switch.turn_off: pump_${id}_sw
          else:
            - switch.turn_on: pump_${id}_sw
            - delay: !lambda return id(pump_${id}_duration).state * 1000;
            - switch.turn_off: pump_${id}_sw

lvgl:
  pages:
    - id: !extend main_page
      widgets:
        - !include
            file: ui/pump_info_component.yaml
            vars:
              id: ${id}
    - id: pump_${id}_page
      styles: page
      layout:
        type: FLEX
        flex_flow: COLUMN
        flex_align_main: START
        flex_align_cross: CENTER
        flex_align_track: CENTER
      widgets:
        - label:
            text: "Pump ${id} Settings"
            width: 100%
            height: SIZE_CONTENT
            text_align: CENTER
        - obj:
            width: 100%
            height: 42
            layout:
              type: FLEX
              flex_flow: ROW
              flex_align_main: SPACE_BETWEEN
              flex_align_cross: CENTER
              flex_align_track: CENTER
            widgets:
              - label:
                  text: "Enabled"
              - switch:
                  group: main_group
                  on_click:
                    then:
                      - lambda: |-
                          id(pump_${id}_enabled).publish_state(x);
        - !include
            file: ui/_spinner.yaml
            vars:
              id: pump_${id}_spinner
              name: "Freq. (sec)"
              min: 10
              max: 86400
              step: 10
              digits: 5
        - !include
            file: ui/_spinner.yaml
            vars:
              id: pump_${id}_spinner
              name: "Dur. (sec)"
              min: 10
              max: 3600
              step: 5
              digits: 4
        - !include
            file: ui/_spinner.yaml
            vars:
              id: pump_${id}_spinner
              name: "Min Temp."
              min: -10
              max: 60
              step: 1
              digits: 2
        - !include
            file: ui/_spinner.yaml
            vars:
              id: pump_${id}_spinner
              name: "Max Soil"
              min: 0
              max: 100
              step: 1
              digits: 3